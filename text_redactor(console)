#define _CRT_SECURE_NO_WARNINGS
#include<iostream>
#include<iomanip>
#include<cmath>
#include<Windows.h>
#include<algorithm>
#include<typeinfo>
#include<string>
#include<conio.h>
//#include"Function.h"
#include <string>

void ClearWorkSpace(int, int, int, int, int);
void ShoInfoPanel(char*& mass);
void AddButton(int, int, int, int, int, int);
using namespace std;

void gotoxy(int xpos, int ypos)
{
	COORD scrn;

	HANDLE hOuput = GetStdHandle(STD_OUTPUT_HANDLE);

	scrn.X = xpos; scrn.Y = ypos;

	SetConsoleCursorPosition(hOuput, scrn);
}

enum ConsoleColor
{
	Black = 0, Blue = 1, Green = 2, Cyan = 3, Red = 4, Magenta = 5, Brown = 6, LightGray = 7, DarkGray = 8,
	LightBlue = 9, LightGreen = 10, LightCyan = 11, LightRed = 12, LightMagenta = 13, Yellow = 14, White = 15
};

void setcolor(int text, int background)
{
	HANDLE hStdOut = GetStdHandle(STD_OUTPUT_HANDLE);
	SetConsoleTextAttribute(hStdOut, (WORD)((background << 4) | text));
}












//////////ФУНКЦИИ ДЛЯ ПОСЛЕДНЕГО ДЗ//////////////////
void ChangeWordOnNew(char*& start_ar, char*& b_whatfind, char*& c_onwhatreplace)
{
	char* Pstop_ptr = strstr(start_ar, b_whatfind);
		if (Pstop_ptr > 0)
		{
			char* temp = new char[strlen(start_ar) + strlen(c_onwhatreplace) + 2];//+2 тк добавляю 2 символа окончания строки		
			strncpy(temp, start_ar, strlen(start_ar) - strlen(Pstop_ptr));
			temp[strlen(start_ar) - strlen(Pstop_ptr)] = '\0';
			strcat(temp, c_onwhatreplace);
			int couunt = strlen(temp);
			for (int i = strlen(b_whatfind) + (strlen(start_ar) - strlen(Pstop_ptr)); i < strlen(start_ar); i++)
			{
				temp[couunt++] = start_ar[i];
			}
			temp[couunt] = '\0';
			delete[]start_ar;
			start_ar = temp;
			ChangeWordOnNew(start_ar, b_whatfind, c_onwhatreplace);
		}
}



void NumberToString(char*& mass, int where_place_x, int where_place_y, int color_t, int color_b)
{
	char* temp = new char[200];
	char* value = new char[200];
ress:
	char a;
	ClearWorkSpace(where_place_x, where_place_y, 6, color_t, color_b);
	AddButton(15, 1, 6, 24, Red, 11);
	setcolor(color_t, color_b);
	int number;
	gotoxy(where_place_x, where_place_y);
	cout << "Введите  число двухзначное: ";
	gets_s(value, 200);
	number = atoi(value);
	if (number < 0 or number > 99)  goto ress;
	if (number >= 10 and number <= 20)
	{
		switch (number)
		{
		case 10: strcpy(temp, "Десять копеек"); break;
		case 11: strcpy(temp, "Одинадцать копеек"); break;
		case 12: strcpy(temp, "Двенадцать копеек"); break;
		case 13: strcpy(temp, "Тренадцать копеек"); break;
		case 14: strcpy(temp, "Четырнадцать копеек"); break;
		case 15: strcpy(temp, "Пятнадцать копеек"); break;
		case 16: strcpy(temp, "Шестнадцать копеек"); break;
		case 17: strcpy(temp, "Семнадцать копеек"); break;
		case 18: strcpy(temp, "Восемнадцать копеек"); break;
		case 19: strcpy(temp, "Девятнадцать копеек"); break;
		case 20: strcpy(temp, "Двадцать копеек"); break;
		default:
			break;
		}
	}
	else
	{

		switch (number / 10)
		{
		case 2: strcpy(temp, "Двадцать "); break;
		case 3: strcpy(temp, "Тридцать "); break;
		case 4: strcpy(temp, "Сорок "); break;
		case 5: strcpy(temp, "Пятьдесят "); break;
		case 6: strcpy(temp, "Шестьдесят "); break;
		case 7: strcpy(temp, "Семьдесят "); break;
		case 8: strcpy(temp, "Восемьдесят  "); break;
		case 9: strcpy(temp, "Девяносто "); break;
		default:
			break;
		}
		switch (number % 10)
		{
		case 0: (number < 9) ? strcat(strcpy(temp, "Ноль копеек"), "") : strcat(temp, "копеек"); break;
		case 1: (number < 9) ? strcat(strcpy(temp, "Одна копейка"), "") : strcat(temp, "одна копейка"); break;
		case 2: (number < 9) ? strcat(strcpy(temp, "Две копейки"), "") : strcat(temp, "две копейки"); break;
		case 3: (number < 9) ? strcat(strcpy(temp, "Три копейки"), "") : strcat(temp, "три копейки"); break;
		case 4: (number < 9) ? strcat(strcpy(temp, "Четыре копейки"), "") : strcat(temp, "четыре копейки"); break;
		case 5: (number < 9) ? strcat(strcpy(temp, "Пять копеек"), "") : strcat(temp, "пять копеек"); break;
		case 6: (number < 9) ? strcat(strcpy(temp, "Шесть копеек"), "") : strcat(temp, "шесть копеек"); break;
		case 7: (number < 9) ? strcat(strcpy(temp, "Семь копеек"), "") : strcat(temp, "семь копеек"); break;
		case 8: (number < 9) ? strcat(strcpy(temp, "Восемь копеек"), "") : strcat(temp, "восемь копеек"); break;
		case 9: (number < 10) ? strcat(strcpy(temp, "Девять копеек"), "") : strcat(temp, "девять копеек"); break;
		default:
			break;
		}
	}
	delete[] value;
	gotoxy(where_place_x, where_place_y += 1);
	cout << "Результат: "<< temp;
	gotoxy(where_place_x, where_place_y += 1);	
	cout << "Выберите меню для продолжения: ";
	if (mass != nullptr) delete[]mass;
}





/////////////////////////////////////////////////////////////////////////////
////////////////ФУНКЦИИ ДЛЯ КОНСОЛЬНОГО РЕДАКТОРА//////////////////////////


void ClearWorkSpace(int where_place_x, int where_place_y, int size_menu, int color_t, int color_b)
{
	setcolor(color_t, color_b);
	int i = 0;
	gotoxy(where_place_x, where_place_y);
	while (i < size_menu)
	{
		cout << " ";
		for (int h = 0; h < where_place_x + 75; h++)
		{

			cout << " ";
		}
		cout << " ";
		cout << endl;
		i++;
		gotoxy(where_place_x, where_place_y += 1);

	}
	gotoxy(3, 24);
	for (int h = 0; h < where_place_x + 75; h++)
	{
		setcolor(White, Black);
		cout << " ";
	}

}



void ReversString2(char*& st, int where_place_x, int where_place_y, int color_t, int color_b)
{
	ClearWorkSpace(where_place_x, where_place_y, 6, color_t, color_b);
	AddButton(10, 1, 52, 24, Red, 11);
	setcolor(color_t, color_b);
	if (st == nullptr) st = new char[200];
	char* t = new char[200];
	gotoxy(where_place_x, where_place_y);
	cout << "Введите строку: ";
	gets_s(st, 200);

	char* t1 = strchr(st, ' ');
	if (t1 != NULL)
	{
		strncpy(t, t1 + 1, strlen(st) - (t1 - st));
		strcat(t, " ");
		strncat(t, st, t1 - st);
		gotoxy(where_place_x, where_place_y += 1);
		cout << "Результат: " << t;
		delete[] st;
		st = t;
		gotoxy(where_place_x, where_place_y += 1);
		cout << "Выберите меню для продолжения: ";
	}
	else
	{
		gotoxy(where_place_x, where_place_y += 1);
		cout << "Результат: " << st;
		gotoxy(where_place_x, where_place_y += 1);
		cout << "Выберите меню для продолжения: ";
		
	}

}




void GameArena(int x, int y)
{

	for (int i = 0; i < y; i++)
	{
		cout << "#";
		if (i == 0 or i == y - 1)
		{
			for (int j = 0; j < x; j++)
			{
				cout << "=";
			}
		}
		else
			if (i > 0 and i < y - 1)
			{
				for (int j = 0; j < x; j++)
				{
					cout << " ";
				}
			}
		cout << "#";
		cout << endl;
	}
}



void AddButton(int size_button_x, int size_button_y, int where_place_x, int where_place_y, int color_text, int color_back)
{

	for (int i = 0; i < size_button_y; i++)
	{
		gotoxy(where_place_x, where_place_y);
		setcolor(Yellow, Black);
		cout << "#";
		if (i == 0 or i == size_button_y - 1)
		{
			for (int j = 0; j < size_button_x; j++)
			{
				setcolor(Green, Black);
				cout << "=";
			}
		}
		else
			if (i > 0 and i < size_button_y - 1)
			{
				for (int j = 0; j < size_button_x; j++)
				{
					setcolor(color_text, color_back);
					cout << " ";
					setcolor(White, Black);
				}

			}
		setcolor(Yellow, Black);
		cout << "#";
		cout << endl;
		gotoxy(where_place_x, where_place_y++);
	}


}

void AddNameInButton(string s, string s2, int where_place_x, int where_place_y, int color_text, int color_back = 12)
{
	setcolor(color_text, color_back);
	gotoxy(where_place_x, where_place_y);
	cout << s;
	gotoxy(where_place_x, where_place_y += 1);
	cout << s2;
}

void AddNameInButton(int& s, string s2, int where_place_x, int where_place_y, int color_text, int color_back = 12)
{
	setcolor(color_text, color_back);
	gotoxy(where_place_x, where_place_y);

	cout << s;
	gotoxy(where_place_x, where_place_y += 1);
	cout << s2;
}


void ChangeTextInredact(char*& mass, char*& mass2, char*& mass3, int where_place_x, int where_place_y, int color_t, int color_b)
{
	setcolor(color_t, color_b);
	ClearWorkSpace(where_place_x, where_place_y, 6, color_t, color_b);
	AddButton(10, 1, 31, 24, Red, 9);
	setcolor(color_t, color_b);
	gotoxy(where_place_x, where_place_y);
	cout << "Введи строку для обработки: ";
	gets_s(mass, 200);
	gotoxy(where_place_x, where_place_y += 1);
	cout << "Поиск слова для замены: ";
	gets_s(mass2, 200);
	gotoxy(where_place_x, where_place_y += 1);
	cout << "На что менять: ";
	gets_s(mass3, 200);
	ChangeWordOnNew(mass, mass2, mass3);
	gotoxy(where_place_x, where_place_y += 1);
	cout << "Результат: " << mass;
	gotoxy(where_place_x, where_place_y += 1);
	cout << "Выберите меню для продолжения: ";
}




void DeletsSymvolChar2(char*& a, int where_place_x, int where_place_y, int color_t, int color_b)
{
	ClearWorkSpace(where_place_x, where_place_y, 8, color_t, color_b);
	AddButton(10, 1, 73, 24, Red, 11);
	setcolor(color_t, color_b);
	gotoxy(where_place_x, where_place_y);
	cout << "Введи строку для обработки: ";
	gets_s(a, 200);
	gotoxy(where_place_x, where_place_y += 1);
	cout << "Введите символ для удаления: ";
	char symvol_del;
	symvol_del = _getch();
	char* tmp = new char[200]; // 
	int i = 0, count = 0;
	while (i < strlen(a))
	{
		if (a[i] != symvol_del)
		{
			tmp[count++] = a[i];
		}
		i++;
	}
	tmp[count] = '\0';
	gotoxy(where_place_x, where_place_y += 1);
	cout << "Результат: " << tmp;
	delete[] a;
	a = tmp;
	gotoxy(where_place_x, where_place_y += 1);
	cout << "Выберите меню для продолжения: ";
}


void FindTotalCountNumbersSymvolsElse(char*& a, int& symvolcount, int& numbcount)
{
	int number = 0, symvol = 0, someelse = 0;
	int i = 0;
	if (a != nullptr)
	{
		while (i < strlen(a))
		{
			if (isalpha(a[i])) symvol++; // не умеет считать русские символы
			else if (isdigit(a[i])) number++;
			else someelse++;
			i++;
		}
		numbcount = number;
		symvolcount = symvol;
	}
}

void ShoInfoPanel(char*& mass)
{
	int numbcount = 0;
	int symvolcount = 0;
	FindTotalCountNumbersSymvolsElse(mass, symvolcount, numbcount);
	gotoxy(41, 2);
	cout << "Количест символов";
	AddButton(4, 3, 59, 1, White, 4);
	AddNameInButton(symvolcount, "", 61, 2, Black, 4);
	gotoxy(69, 2);
	setcolor(White, Black);
	cout << "Количест цифер";
	AddButton(4, 3, 84, 1, White, 7);
	AddNameInButton(numbcount, "", 86, 2, Black, 7);
}









int main()
{
	setlocale(LC_ALL, "");

start:
	system("cls");
	setcolor(White, Black);
	char user_enter;
	GameArena(101, 30);
	AddButton(17, 4, 3, 1, White, 11);
	AddNameInButton("Очистка экрана", "Жми *", 5, 2, Red, 11);
	AddButton(20, 4, 3, 25, White, Cyan);
	AddNameInButton("Вывод числа в коп", "Жми - 1", 6, 26, Red, Cyan);
	AddButton(17, 4, 27, 25, White, 13);
	AddNameInButton("Замена слова", "Жми - 2", 30, 26, 15, 13);
	AddButton(17, 4, 48, 25, White, 14);
	AddNameInButton("Реверс строки", "Жми - 3", 50, 26, Black, 14);
	AddButton(17, 4, 69, 25, White, 12);
	AddNameInButton("Удалить символ", "Жми - 4", 72, 26, 9, 12);
	AddButton(7, 4, 90, 25, White, 6);
	AddNameInButton("Exit:", "ESC", 92, 26, 9, 6);
	AddButton(95, 18, 3, 6, White, 3);
rep:
	user_enter = _getch();
	if (user_enter == '1' or user_enter == '2' or user_enter == '3' or user_enter == '4' or user_enter == 27 or user_enter == '0' or user_enter == '*')
	{
		char* mass = new char[2000];//если не инициилизировать снова, то при повторном обращении выскакивает heap buffer
		char* mass2 = new char[2000];//
		char* mass3 = new char[2000];//
		switch (user_enter)
		{
		case '1': NumberToString(mass, 10, 8, White, 3);   break;
		case '2': ChangeTextInredact(mass, mass2, mass3, 10, 8, White, 3);  break;
		case '3': ReversString2(mass, 10, 8, White, 3);  break;
		case '4': DeletsSymvolChar2(mass, 10, 8, White, 3); break;
		case '*': setcolor(White, Black); goto start;  break;
		default: gotoxy(0, 35); exit(0);
			break;
		}
		if (user_enter != '1') ShoInfoPanel(mass);//не умеет считать ру символы
	}
	goto rep;


}
