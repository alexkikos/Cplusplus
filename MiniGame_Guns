#include<iostream>
#include<iomanip>
#include<Windows.h>
#include<algorithm>
#include<typeinfo>
#include<string>
#include<conio.h>

using namespace std;


enum ConsoleColor
{
	Black = 0, Blue = 1, Green = 2, Cyan = 3, Red = 4, Magenta = 5, Brown = 6, LightGray = 7, DarkGray = 8,
	LightBlue = 9, LightGreen = 10, LightCyan = 11, LightRed = 12, LightMagenta = 13, Yellow = 14, White = 15
};

void setcolor(int text, int background)
{
	HANDLE hStdOut = GetStdHandle(STD_OUTPUT_HANDLE);
	SetConsoleTextAttribute(hStdOut, (WORD)((background << 4) | text));
}


void ConvertCharToInt(char& a)
{
	int b;
	b = (int)a - (int) '0';
	a = b;
}


void PrintText2(string s, int a, int color_text = 1, int color_background = 0)
{
	setcolor(color_text, color_background);
	cout << s << a;
	setcolor(White, Black);
}

void PrintText(string s, int color_text = 1, int color_background = 6)
{
	setcolor(color_text, color_background);
	cout << s;
	setcolor(White, Black);
}


void Preset()
{
	cout << "\t\t\t  _______      ___      .___  ___. _______ " << endl;
	cout << "\t\t\t /  _____|    /   \\    |   \\/  ||   ____|" << endl;
	cout << "\t\t\t|  |  __     /  ^  \\   |  \\  / ||  |__   " << endl;
	cout << "\t\t\t|  | |_ |   /  /_\\  \\ |  |\\/| ||   __|  " << endl;
	cout << "\t\t\t|  |__| |  /  _____  \\ |  |  |  ||  |____ " << endl;
	cout << " \t\t\t\\______| /__/     \\__|__|  |__||_______|" << endl;
	cout << "" << endl;
}

void Preset2()
{
	cout << "\t\t\t     _______..___________.     ___     .______      .___________." << endl;
	cout << "\t\t\t   /       ||           |    /   \\    |   _  \\     |           |" << endl;
	cout << "\t\t\t  |   (----``---|  |----`   /  ^  \\   |  |_)  |    `---|  |----`" << endl;
	cout << "\t\t\t    \\   \\        |  |       /  /_\\  \\  |      /         |  |     " << endl;
	cout << "\t\t\t.----)   |       |  |      /  _____  \\ |  |\\  \\----.    |  |     " << endl;
	cout << "\t\t\t|_______/        |__|     /__/     \\__\\| _| `._____|    |__|     " << endl;
	cout << "" << endl;
}


void Preset3()
{
	system("cls");
	cout << "\t\t\t ____    " << endl;
	cout << "\t\t\t|___ \\   " << endl;
	cout << "\t\t\t  __) |  " << endl;
	cout << "\t\t\t |__ <   " << endl;
	cout << "\t\t\t ___) |  " << endl;
	cout << "\t\t\t|____/   " << endl;
	cout << "" << endl;

}


void Preset4()
{
	system("cls");
	cout << "\t\t\t ___     " << endl;
	cout << "\t\t\t|__ \\    " << endl;
	cout << "\t\t\t   ) |   " << endl;
	cout << "\t\t\t  / /    " << endl;
	cout << "\t\t\t / /_    " << endl;
	cout << "\t\t\t|____|   " << endl;
	cout << "" << endl;

}



void Preset5()
{
	system("cls");
	cout << "\t\t\t __    " << endl;
	cout << "\t\t\t/_ |   " << endl;
	cout << "\t\t\t | |   " << endl;
	cout << "\t\t\t | |   " << endl;
	cout << "\t\t\t | |   " << endl;
	cout << "\t\t\t |_|   " << endl;
	cout << "" << endl;


}


void Preset6()
{
	system("cls");
	cout << "\t\t  _______   ______  " << endl;
	cout << "\t\t /  _____| /  __  \\ " << endl;
	cout << "\t\t|  |  __  |  |  |  |" << endl;
	cout << "\t\t|  | |_ | |  |  |  |" << endl;
	cout << "\t\t|  |__| | |  `--'  |" << endl;
	cout << " \t\t\\______|  \\______/ " << endl;
	cout << "" << endl;

}






void Gun(int* b)
{
	cout << endl;
	setcolor(rand() % 14+1, 0);
	cout << "+-- ^ ----------, --------, ---- - , -------- ^ -, " << endl;
	cout << "| |||||||||   `------- - '        |              0 " << endl;
	cout << "`+------------------------------- ^ -------------|" << endl;
	cout << "   `\_, -------- - , -------- - , -----------'" << endl;
	cout << "     / XXXXXX /'|       /'" << endl;
	cout << "    / XXXXXX / ` \     / '" << endl;
	cout << "   / XXXXXX / `-------'" << endl;
	cout << "  / XXXXXX /" << endl;
	cout << " / XXXXXX /" << endl;
	cout << "(________(" << endl;
	cout << "`----- - ' " << endl;

	b[0] -= 1;
	cout << endl;
}


void Riffle(int* b)
{
	setcolor(rand() % 14+1, 0);
	cout << endl;
	cout << "________________________________________¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶" << endl;
	cout << "	_______________________________¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶__" << endl;
	cout << "________________________¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶_____________" << endl;
	cout << "	__________________¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶________________" << endl;
	cout << "	_________________¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶______________________" << endl;
	cout << "	¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶_________________________" << endl;
	cout << "	¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶_¶_¶¶¶¶¶¶¶¶_________________________" << endl;
	cout << "	¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶__¶¶¶¶¶___¶__¶¶¶¶¶¶________________________" << endl;
	cout << "	_¶¶¶¶¶¶¶¶¶¶¶¶____¶¶¶¶¶¶¶¶¶___¶¶¶¶¶¶_______________________" << endl;
	cout << "	__¶¶¶¶¶¶¶¶¶______¶¶¶¶¶_______¶¶¶¶¶¶¶______________________" << endl;
	cout << "	___¶¶¶¶¶¶________¶¶¶¶¶_________¶¶¶¶¶¶¶____________________" << endl;
	cout << "	____¶¶¶¶_________¶¶¶¶¶__________¶¶¶¶¶¶¶¶__________________" << endl;
	cout << endl;
	b[1] -= 10;
}


void Arrow(int* b)
{
	setcolor(rand() % 14+1, 0);
	cout << endl;
	cout << "			 4$$ - ." << endl;
	cout << "			 4 ." << endl;
	cout << "			 4 ^ ." << endl;
	cout << "			 4     $" << endl;
	cout << "			 4     'b" << endl;
	cout << "			 4       b." << endl;
	cout << "			 4        $" << endl;
	cout << "			 4        $r" << endl;
	cout << "			 4        $F" << endl;
	cout << "- $b========4========$b====>>=->>" << endl;
	cout << "			 4		  $$F" << endl;
	cout << "			 4        $$" << endl;
	cout << "			 4		.$F" << endl;
	cout << "			 4      dP" << endl;
	cout << "			 4     F" << endl;
	cout << "			 4    @" << endl;
	cout << "			 4  ." << endl;
	cout << "			 J." << endl;
	cout << endl;
	b[2] -= 1;


}



bool CheckAmunitions(int* a, int number, int minshot)
{
	if (a[number] >= minshot)
	{
		return true;
	}
	else
		return false;
}




bool FindMaxElem(int b, int max1)
{
	if (b > max1)
	{
		return true;
	}
	else return false;
}

bool FindMinElem(int b, int max1)
{
	if (max1 > b)
	{
		return true;
	}
	else return false;
}

int findMaxelemofArray(int* a, int number, bool(*check)(int b, int max1) = FindMaxElem)//ПОКА НЕ ВЗЯЛ МАКС ПО АДРЕСУ НЕ СРАБАТЫВАЛА ПРОВЕРКА
{

	int max = a[0], imax = 0;
	for (int i = 0; i < number; i++)
	{
		if (check(a[i], max))
		{
			max = a[i];
			imax = i;
		}
	}
	return imax;
}



void(*shot(int* b))(int*)
{
	int min;
	int max = findMaxelemofArray(b, 3);
	void(*action[])(int*) = { Gun, Riffle, Arrow };
	(max == 1) ? min = 10 : min = 1;
	if (CheckAmunitions(b, max, min) and max != 1)
	{
		return action[max];
	}
	else
		if (CheckAmunitions(b, max, min))
		{
			return action[max];
		}
		else
		{
			PrintText("Патроны закончились!", 10, 0);
			exit(0);
		}
}


void finder1(int a)
{
	cout << endl;
	setcolor(Green, Black);
	cout << "                  {}\n";
	cout << "  ,   A           {}\n";
	cout << " / \\, | ,        .--.\n";
	cout << "|  =|= >        /.--.\\\n";
	cout << " \\ /` | `       |====|\n";
	cout << "  `   |         |`::`|\n";
	cout << "      |     .-;`\\..../`;_.-^-._\n";
	cout << "     /\\\\/  /  |...::..|`   :   `|\n";
	cout << "     |:'\\ |   /'''::''|   .:.    |\n";
	cout << "      \\ /\\;-,/\\   ::  |..Chest |\n";
	cout << "      |\\ <` >  >._::_.| ':Find:  |\n";
	cout << "      | `""`_/   ^^/>/>  |   ':'  |\n";
	cout << "      |       |       \\    :    /\n";
	cout << "      |       |        \\   :   /\n";
	cout << "      |       |___/\\___|`-.:.-`\n";
	cout << "      |        \\_ || _/    `\n";
	cout << "      |        <_ >< _>\n";
	cout << "      |        |  ||  |\n";
	cout << "      |        |  ||  |\n";
	cout << "      |       _\\.:||:./_\n";
	cout << "      | jgs  /____/\\____\\\n";
	cout << "\n";
	cout << ".:*~*:._.:*~*:._.:*~*:._.:*~*:._.:*~*:._.:*~*:._.:*~*:._.:*~*:._.:*~*:" << endl;
	setcolor(White, Black);
	PrintText2("ВОУ ВЫ НАШЛИ СУНДУК С ПАТРОНАМИ!!! И ИХ КОЛИЧЕСТВО = ", a, 3, 0);
}




void MinValue(int* b, int count, int index)
{
	int imin = findMaxelemofArray(b, 3, FindMinElem);
	b[imin] += count;
}

void UserValue(int* b, int count, int index)//индекс 2 для защиты от ввода левых значений, к примеру у нас 3 пушки,пользователь ввел 5, поплнится по дефолту автомат
{
	if (index > 3 or index < 0) index = 2;//если ввели левый индекс по умолчанию пополним автомат
	b[index - 1] += count;
}



void addCart(int* a, int index, int amount, void(*addvalue)(int* b, int count, int index2) = MinValue)
{
	PrintText("\nТекущее количество боеприпасов : \n", 5, 0);
	for (int i = 0; i < 3; i++)
	{
		cout << i + 1 << "==" << a[i];
		cout << endl;
	}
	addvalue(a, amount, index);
	cout << "Пополнение успешно!";
	PrintText("\nколичество боеприпасов после пополнения:\n", 5, 0);
	for (int i = 0; i < 3; i++)
	{
		cout << i + 1 << "==" << a[i];
		cout << endl;
	}
	cout << endl;
}





void FindChest(int* bullet, int& count, int rand_mov_value)
{
	if (rand_mov_value == count)
	{
		system("cls");
		char c;
		count = 0;
		int value = rand() % (30 - 1 + 1) + 1;//количество патронов рандомное
		finder1(value);//вывожу картинку с сообщением о нахождении сундука
		PrintText("\nВыберите номер оружия для пополнения '1' '2' '3', любой другой символ - пополнить оружие с минимальным количество патронов : ", 3, 0);
		c = _getch();
		ConvertCharToInt(c);
		if (c == 1 or c == 2 or c == 3)	addCart(bullet, c, value, UserValue);   else addCart(bullet, c, value);
	}
}


void ShowStatusBar(int* b)
{
	PrintText("\n       Количество боеприпасов\n", 10, 0);
	for (int c = 0; c < 3; c++)
	{
		if (c == 0 or c == 2)
		{
			for (int i = 0; i < 40; i++)
			{
				PrintText("#", 11, 0);
			}
		}
		if (c == 1)
		{
			cout << "Gun = " << b[0];
			cout << "    Riffle = " << b[1];
			cout << "    Arrow = " << b[2];
		}
		cout << endl;
	}
}


int main()
{
	setlocale(LC_ALL, "");
	srand(time(0));

	int rand_mov_value;
	int value;
	int bullet[3] = {25,25,25};// Gun RIffle Arrow
	void(*action) (int*);
	void(*shot_specific[3])(int* b) = { Gun, Riffle, Arrow };
	void(*preset[6])() = { Preset, Preset2, Preset3, Preset4, Preset5, Preset6 };
	int count = 0;
	int choice;
	char c;
	for (int i = 0; i < 6; i++)
	{
		setcolor(rand() % 14+1, 0);
		preset[i]();
		Sleep(2000);
	}
	do
	{
		if (count == 0)
		{
			rand_mov_value = rand() % 20 + 10;
		}
		count++;
		FindChest(bullet, count, rand_mov_value);//Нашли бонусный сундук, и добавили патроны в обоймы
		action = shot(bullet);
		c = _getch();
		switch (c)
		{
		case 'g': if (CheckAmunitions(bullet, 0, 1)) shot_specific[0](bullet); else PrintText("Патроны оф, смените оружие", 8, 0);	break;
		case 'a': if (CheckAmunitions(bullet, 2, 1)) shot_specific[2](bullet); else PrintText("Патроны оф, смените оружие", 8, 0);	break;
		case 'r': if (CheckAmunitions(bullet, 1, 10)) shot_specific[1](bullet); else PrintText("Патроны оф, смените оружие", 8, 0);	break;
		case 27: exit(0);
		default: action(bullet); break;
		}
		ShowStatusBar(bullet);
	} while (true);


}
